import React, { useState, useEffect } from 'react';
import Button from '../common/Button';
import TextArea from '../common/TextArea';
import { useAuth } from '../../context/AuthContext';
import { addPost } from '../../utils/localStorage';
import MicIcon from '../../assets/animated-icons/mic.svg';
import VideoIcon from '../../assets/animated-icons/video.svg';
import AnimatedMicIcon from '../../assets/animated-icons/animated-mic.gif';
import AnimatedVideoIcon from '../../assets/animated-icons/animated-video.gif';
import ToolBar from './ToolBar';

interface LoginRequiredInteractions {
  textInput?: boolean;
  postButton?: boolean;
  toolbarButtons?: boolean;
  mediaButtons?: boolean;
}

interface PostEditorProps {
  onPostCreated?: () => void;
  onLoginRequired?: (content: string) => void;
  loginRequiredInteractions?: LoginRequiredInteractions;
  preservedContent?: string;
}

const PostEditor: React.FC<PostEditorProps> = ({
  onPostCreated,
  onLoginRequired,
  loginRequiredInteractions = {
    textInput: true,
    postButton: true,
    toolbarButtons: true,
    mediaButtons: true
  },
  preservedContent = ''
}) => {
  const [content, setContent] = useState(preservedContent);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [hoveredButton, setHoveredButton] = useState<string | null>(null);
  const { user } = useAuth();

  // Update content when preservedContent changes
  useEffect(() => {
    setContent(preservedContent);
  }, [preservedContent]);

  // Helper function to get the appropriate icon source
  const getIconSrc = (buttonType: string, animatedSrc: string, staticSrc: string) => {
    return hoveredButton === buttonType ? animatedSrc : staticSrc;
  };

  // Handle login requirement check
  const requireLogin = () => {
    if (!user && onLoginRequired) {
      onLoginRequired(content);
      return true;
    }
    return false;
  };

  // Handle text input with login check
  const handleContentChange = (newContent: string) => {
    if (loginRequiredInteractions.textInput && requireLogin()) {
      return;
    }
    setContent(newContent);
  };

  const handleBoldToggle = (isActive: boolean) => {
    if (loginRequiredInteractions.toolbarButtons && requireLogin()) {
      return;
    }
    console.log('Bold toggled:', isActive);
    // TODO: Implement bold formatting logic
  };

  const handleItalicToggle = (isActive: boolean) => {
    if (loginRequiredInteractions.toolbarButtons && requireLogin()) {
      return;
    }
    console.log('Italic toggled:', isActive);
    // TODO: Implement italic formatting logic
  };

  const handleUnderlineToggle = (isActive: boolean) => {
    if (loginRequiredInteractions.toolbarButtons && requireLogin()) {
      return;
    }
    console.log('Underline toggled:', isActive);
    // TODO: Implement underline formatting logic
  };

  // Handle media button clicks
  const handleVideoClick = () => {
    if (loginRequiredInteractions.mediaButtons && requireLogin()) {
      return;
    }
    console.log('Function not implemented - Add video');
  };

  const handleMicClick = () => {
    if (loginRequiredInteractions.mediaButtons && requireLogin()) {
      return;
    }
    console.log('Function not implemented - Add audio');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (loginRequiredInteractions.postButton && requireLogin()) {
      return;
    }

    if (!content.trim() || !user) {
      return;
    }

    setIsSubmitting(true);

    try {
      const newPost = {
        id: '', // Will be generated by addPost
        userId: user.id,
        content: content.trim(),
        timestamp: 'Just now',
        likes: 0,
        comments: 0,
        shares: 0
      };

      addPost(newPost);
      setContent('');

      if (onPostCreated) {
        onPostCreated();
      }
    } catch (error) {
      console.error('Error creating post:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const placeholderText = user
    ? "What are you thinking about?"
    : "Sign in to share your thoughts...";

  return (
    <div className="bg-white border border-gray-200 rounded-lg">
      <form onSubmit={handleSubmit}>
        {/* Header */}
        <div className="flex flex-col w-full items-start p-2">
          <ToolBar
            onBoldToggle={handleBoldToggle}
            onItalicToggle={handleItalicToggle}
            onUnderlineToggle={handleUnderlineToggle}
          />
          <TextArea
            value={content}
            onChange={handleContentChange}
            placeholder={placeholderText}
            rows={3}
            maxLength={500}
            className="resize-none"
          />
        </div>

        {/* Toolbar */}
        <div className="flex items-center justify-between border-t border-gray-100 px-2 py-2">
          <div className="flex items-center space-x-2">
            <Button
              type="button"
              variant="icon"
              size="sm"
              onClick={handleVideoClick}
              className="flex items-center space-x-1"
              onMouseEnter={() => setHoveredButton('video')}
              onMouseLeave={() => setHoveredButton(null)}
            >
              <img
                src={getIconSrc('video', AnimatedVideoIcon, VideoIcon)}
                alt="Add video"
                className="w-5 h-5"
                key={hoveredButton === 'video' ? 'animated-video' : 'static-video'}
              />
            </Button>

            <Button
              type="button"
              variant="icon"
              size="sm"
              onClick={handleMicClick}
              className="flex items-center space-x-1"
              onMouseEnter={() => setHoveredButton('mic')}
              onMouseLeave={() => setHoveredButton(null)}
            >
              <img
                src={getIconSrc('mic', AnimatedMicIcon, MicIcon)}
                alt="Add audio"
                className="w-5 h-5"
                key={hoveredButton === 'mic' ? 'animated-mic' : 'static-mic'}
              />
            </Button>
          </div>

          <Button
            type="submit"
            variant="primary"
            size="sm"
            disabled={!content.trim() || isSubmitting}
          >
            {isSubmitting ? 'Posting...' : 'Post'}
          </Button>
        </div>
      </form>
    </div>
  );
};

export default PostEditor;